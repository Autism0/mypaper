
\rhead{\xiaowuhao\sectionindex\quad代码修改分析和注释检查系统}
\section{代码修改分析与注释检查系统}
\par{本章结合第二章和第三章的内容，将注释一致性检测方法和关键类判定方法引入到我们的代码修改分析和注释检查系统中。以下将详细介绍系统的具体实现。其中，该系统主要分为三大模块：(1)代码修改分析模块；(2)注释检查模块；以及(3)基础服务模块。其中，代码修改分析模块中的关键类检测功能和注释检查模块中的注释一致性检测功能为系统的核心功能，其他功能模块为这两个核心功能的辅助模块。系统的实现采用MVC(Model-View-Controller)模式，实现平台为Java，采用Spring Boot框架进行系统构建，前端使用Thymeleaf引擎，后台数据库为MongoDB数据库。系统功能结构图如图 \ref{Fig 1}所示。
\begin{figure}[hbp]
\centering
\includegraphics[width=5.5in]{figures/14.png}
\caption{系统功能结构图}
\label{Fig 1}
\end{figure}
}
\subsection{代码修改分析模块}
\par{
代码修改分析模块包括以下几个功能：(1)关键类检测功能；(2)类间关系提取功能；(3)代码修改提取功能；(4)代码修改统计功能。该模块主要完成关键类的检测与展示，类间关系的提取与展示，代码修改的提取与展示以及每个类的修改信息的统计与展示等任务。其中，关键类检测功能为本模块的核心功能。以下我们将对每个功能作简要的阐述。
}
\subsubsection{关键类检测功能}
\par{
关键类检测功能作为我们的系统的核心模块之一，其主要负责对用户上传的修改类文件作关键类判定。该功能主要包括两方面的内容：(1)关键类分类模型的构建；(2)关键类分类模型的分类结果展示。其中，关键类分类模型的构建过程如图 \ref{Fig 3}所示。我们从开源代码库中爬取项目提交信息，获取到涉及修改的源代码文件，并通过抽象语法树解析得到代码修改信息。然后根据第三章所描述的特征提取方法提取特征，得到训练特征向量列表，用于关键类分类模型的训练。在关键类分类模型训练完成后，我们对用户上传的数据也进行类似的过程，得到待分类特征向量列表。最后经过关键类分类模型的分类，输出分类结果。至此，我们实际上已经得到了用户上传的修改类作为关键类的概率值(0-1之间的小数值)。
\begin{figure}[hbp]
\centering
\includegraphics[width=5.5in]{figures/16.png}
\caption{关键类分类模型构建过程}
\label{Fig 3}
\end{figure}
}
\par{在对关键类分类模型的分类结果进行展示时，我们采用鱼网图的方式。在鱼网图中，修改类作为关键类的概率值越大，其所占面积也越大。换句话说，该类在此次修改中也就显得越重要。展示效果如图 \ref{Fig 4}(a)所示，该图说明用户此次上传的文件中涉及5个修改类。在这5个修改类中，\emph{Figure}类所占面积最大，即它作为关键类的概率越大。这说明了此次修改\emph{Figure}类为主要修改的类，开发和维护人员在进行代码理解时，应主要关注\emph{Figure}类的变化。
}
\begin{figure}[t]
\centering
%%\includegraphics[]{}
\subfigure[关键类鱼网图]{
\label{Fig.sub1}
\includegraphics[height=55mm]{figures/17.png}
}
\subfigure[修改类关系网状图]{
\label{Fig.sub2}
\includegraphics[height=55mm]{figures/18.png}
}
\caption[图注]{关键类鱼网图和修改类关系网状图}
\label{Fig 4}
\end{figure}

\subsubsection{类间关系提取功能}
\par{
类间关系提取功能主要负责提取修改类之间的调用关系，并以可视化方式展现给用户。通常而言，在一次代码修改中，修改类之间并不互相独立，它们或多或少存在着一些耦合关系。我们在对用户上传的数据进行抽象语法树解析的同时，也提取了每个修改类之间的调用关系，并且在我们的系统中采用网状图的形式展现出来。展示效果如图 \ref{Fig 4}(b)所示。从图中可以看出，\emph{Figure}类均被其他类使用到。而从我们的关键类鱼网图中亦可看出，\emph{Figure}类为主要修改的类。在这里再次印证了我们将\emph{Figure}类作为关键类的猜想。}
\subsubsection{代码修改提取功能}
\par{
代码修改提取功能作为以上三个功能的基础服务模块存在，其主要负责对用户上传的文件进行新旧版本比对，并通过抽象语法树提取代码变化实体，如变化的类，变化的方法，变化的语句等。同时，我们还实现了新旧文件基于行的比对。其主要用于用户上传的源代码的展示，以方便开发和维护人员阅读代码及其修改的部分。结合核心类检测功能，我们将修改类按照其关键类概率从大到小依次展示其源代码，且高亮显示涉及代码变化的行。其中，新增行在行开头增加了``+''标记，删除行在行开头增加了``-''标记。在图 \ref{Fig 6}中给出了完整示例，包括关键类鱼网图，修改类关系网状图，修改类摘要信息以及源代码展示(由于页面长度限制，省略了关键类概率值排名倒数前三的修改类的展示)。
\begin{figure}[tp]
\centering
\includegraphics[width=5.5in]{figures/19.png}
\caption{修改类信息展示页面}
\label{Fig 6}
\end{figure}
}
\subsubsection{代码修改统计功能}
\par{
代码修改统计功能负责统计修改类的相关变化信息。其展示页面如图\ref{Fig 2}所示。其中，数字1标示部分通过表格形式展示修改类的信息。展示内容包括类编号，类名，旧类代码行，新类代码行，旧类方法数，新类方法数以及类的变化类型。数字2至数字5标示部分通过柱状图的形式分别对类的变化方法个数，变化语句个数，类的入度以及类的出度进行展示。其中，变化方法个数以及变化语句个数又包括新增，修改和删除三种类型，在柱状图中我们通过不同颜色对其进行区分。类的入度指的是该类被多少个修改类引用过，类的出度表示该类引用的修改类个数。我们通过数字1表示的表格可以准确的知道每个类的修改信息，而从数字2至数字5所示的柱状图中，则可以对每个类的修改幅度以及引用其他类和被其他类引用的多少作出直观和清晰的比较。通过结合关键类检测功能以及类间关系提取功能，可以更准确且快速地把握主要修改的类，从而提高开发和维护人员理解代码修改的效率。
\begin{figure}[hbp]
\centering
\includegraphics[width=5.7in]{figures/15.png}
\caption{代码修改统计页面}
\label{Fig 2}
\end{figure}
}
\subsection{注释检查模块}
\par{注释检查模块包括以下几个功能：(1)注释一致性检测功能；(2)注释作用域检测功能；(3)注释信息统计功能。该模块主要完成注释一致性的检测与展示，注释作用域的检测与展示，以及修改类中注释信息的统计与展示等任务。其中，注释一致性检测功能为该模块的核心功能。以下我们将对这几个功能作简要的说明。}

\subsubsection{注释一致性检测功能}
\par{注释一致性检测功能是系统的一个核心功能，其主要负责对用户上传的修改类文件中的代码和注释作一致性检查。该功能的流程图如图 \ref{Fig 8}所示。}
\begin{figure}[!hb]
\centering
\includegraphics[width=4.3in]{figures/24.png}
\caption{注释一致性检测流程图}
\label{Fig 8}
\end{figure}
\begin{figure}[!b]
\centering
\includegraphics[width=5.5in]{figures/33.png}
\caption{注释一致性检测页面}
\label{Fig 9}
\end{figure}
\par{首先，我们从开源代码库中爬取训练数据，通过抽象语法树解析得到修改的代码片段，并利用注释作用域检测功能将注释和代码关联。然后，根据第二章所描述的特征提取方法提取特征，得到训练特征向量集，用于注释一致性分类模型的训练。在分类模型训练完成后，我们对用户上传的数据也进行类似的过程，得到待检测特征向量集。最后通过分类模型的分类，得到分类结果，并将分类结果为与代码不一致的注释及其相关代码提交给用户以供查看和修复。最终检测结果如图\ref{Fig 9}所示。其中，数字1表示部分为注释一致性信息表格，表格内容包括注释编号，注释所属类，注释作用域范围和注释与代码的一致性。注释信息按照与代码不一致的概率从大到小排列。数字2标示部分为注释及与注释相关的代码信息。代码片段中涉及修改的代码高亮显示，以提示用户重点关注变化的代码。}

\subsubsection{注释作用域检测功能}
\par{注释作用域检测功能主要负责确定注释所关联的代码的范围。系统根据第二章中算法\textbf{1}所示的算法完成注释作用域的检测。然后，在代码显示区域只显示在注释作用域范围内的代码。从而达到关注与注释密切相关的代码片段，而忽略掉那些与注释关系不大的代码的效果。如图\ref{Fig 9}所示，数字2标示部分为注释及与注释相关的代码信息，其忽略了在注释作用域范围外的代码。}

\subsubsection{注释信息统计功能}
\par{
\begin{figure}[!b]
\centering
\includegraphics[width=4.8in]{figures/23.png}
\caption{注释信息统计页面}
\label{Fig 7}
\end{figure}
注释信息统计功能负责统计修改类中的注释信息。其展示页面如图 \ref{Fig 7}所示。其中，数字1标示部分通过表格形式展示类中注释的信息。展示内容包括类编号，类名，代码行，注释行，文档注释个数，块注释个数以及行注释个数。数字2至数字5标示部分通过柱状图的形式分别对类中的注释密度，注释长度，注释的语义类型以及注释的语法类型个数进行展示。其中，注释的语义类型包括``TODOs''，``Bug''，``Note''和``Common''四种类型。注释的语法类型包括文档注释，块注释和行注释类型。我们通过数字1标示的表格可以准确的知道每个类中的注释信息，而从数字2至数字5所示的柱状图中，则可以对每个类中的注释情况作出直观清晰的比较。结合这两类信息以及注释一致性信息，用户可以对类中的注释质量作出一个大致的判断。
}

\subsection{基础服务模块}
\par{基础服务模块包括以下几个功能：(1)用户管理功能；(2)数据上传功能；(3)数据管理功能。其中，用户管理功能主要完成用户的注册，登录，注销等操作。数据上传功能主要完成用户的代码修改上传，分析和保存等操作。数据管理功能主要完成用户历史上传数据的搜索，查看和删除等操作。}
\subsection{本章小结}

\par{在本章中，我们简要地介绍了代码修改分析和注释检查系统的功能实现，其主要包含三个功能模块，分别为：代码修改分析模块，注释检查模块和基础服务模块。代码修改分析模块集成了第三章中关键类判定的相关内容，注释检查模块集成了第二章中代码和注释一致性检测的相关内容，基础服务模块主要是为用户及其相关数据管理服务的模块。通过代码修改分析和注释检查系统，用户可以在线分析一次代码提交的代码修改，并检查代码和注释的一致性，从而提高代码提交的质量。}
