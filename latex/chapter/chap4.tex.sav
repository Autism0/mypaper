
\rhead{\xiaowuhao\sectionindex\quad代码修改影响分析与修改周期预测系统}
\section{代码修改影响分析与修改周期预测系统}
\par{本章结合第二章与第三章的研究内容，通过本文提出的修改影响分析辅助方法和修改完成预测方法构建我们的代码修改影响分析与周期预测系统。系统的实现采用MVC(Model-View-Controller)模式，实现平台为Java，采用Spring Boot框架进行系统构建，前端使用Thymeleaf引擎，后台数据库为MongoDB数据库。其中，该系统主要分为三大模块：(1)代码修改影响分析模块；(2)代码修改周期预测模块；(3)基础服务模块。
系统功能模块图如图所示。}
\begin{figure}[h]
\centering
\includegraphics[width=5.5in]{myfigure/system.pdf}
\caption{系统功能结构图}
\label{fig:system}
\end{figure}
\subsection{系统需求分析}
\par{本系统结合了第二章与第三章提出的方法，本系统主要目标用户为程序开发人员。图\ref{UML}为系统用例分析图， 主要有数据收集与预处理，模型训练以结果展示三大核心需求。下面对对系统用例进行详细介绍。}
\begin{figure}[h]
\centering
\includegraphics[width=5.5in]{myfigure/uml.pdf}
\caption{代码修改影响分析与修改周期预测系统用例分析图}
\label{UML}
\end{figure}
\par{\textbf{1）数据收集与预处理}}
\par{本文提出的两种方法都是基于历史代码修改信息实现，因此，我们需要提前收集一些开源项目的历史提交信息及历史审核信息。另外，需要对这些数据进行一些预处理操作，去除历史数据中的噪声数据。该用例还包括的功能有：历史提交中修改信息的提取、修改代码之间结构耦合信息提取以及提交中用于周期预测的可判别特征提取。最后将相关数据存储于本地仓库中。}
\par{\textbf{2）	模型训练}}
\par{在修改影响分析的详细提交检索基于词向量模型实现，而代码修改周期预测方法通过机器学习模型实现，除了可判别特征的提取外，模型训练效果直接影响预测结果。在系统中，我们提供多种机器学习算法，以及相应的可设置参数。}
\par{\textbf{3）	结果展示}}
\par{本章系统主要实现代码修改影响分析功能以及代码修改周期预测功能。在修改影响分析功能中，开发人员在前端上传相关修改代码、修改目标信息以及选定初始影响分析方法，后台根据初始影响分析方法得到初始影响集，再通过影响分析辅助方法对初始影响集进行优化，得到最终影响集并返回前端显示。在代码修改周期预测中，开发人员上传相关修改代码以及审核信息，后台关联其相关项目，根据项目中的代码修改和审核信息训练模型，再对其上传内容进行预测，并把结果返回前端显示。}
\subsection{代码修改影响分析模块实现}
\par{代码修改影响分析模块在历史提交库中检索与目标修改任务相似的提交，利用历史提交中关键类的修改模式，对当前修改类进行影响集的推荐。该模块包含一下几个功能：（1）关键类识别功能；（2）代码修改提取功能；（3）相似提交检索功能；（4）类间耦合关系提取功能；（5）影响集推荐功能。图4-4展示了该模块主要的类及对应的功能。}
\begin{table}[h]
\caption{修改影响分析主要类及对应功能}
\begin{center}
\begin{scriptsize}
\setlength{\tabcolsep}{7mm}{
\begin{tabular}{ll}
\toprule 
\textbf{类名称}                    & \textbf{类功能描述}                \\
\midrule 
ClassChange            & 提取提交两个版本中同个类的修改信息    \\
VersionChange          & 提取提交两个版本的修改信息        \\
Word2VecModel          & 封装词向量模型              \\
CoreClassModel         & 封装关键类识别模型            \\
InitImpactSetGenerator & 封装多种传统影响分析方法，生成初始影响集 \\
CouplingRelations      & 提取类间结构耦合关系           \\
ImpactSetOptimizer     & 初始影响集排序的调整，返回最终影响集\\
\bottomrule
\end{tabular}}
\label{RQ2 result}
\end{scriptsize}
\end{center}
\end{table}
\par{图4-3为本功能模块的运行流程图。用户上传涉及修改的代码和修改目标后，系统通过文本预处理对两份数据进行处理，得到与历史提交库中相同的文本形式；通过词向量模型，对比用户输入数据与提交库每个提交中关键类的相似度，得到最相似的提交列表；用户选择初始影响分析方法，得到初始影响集，系统计算相似提交中关键类与非关键类的耦合关系以及修改类与初始影响集中类的耦合关系，再基于两部分耦合关系中相似的部分，对初始影响集进行优化排序，得到最终影响集。下面，我们简要阐述子功能模块的实现。}
\subsubsection{关键类识别功能}
\par{在本文影响分析方法中，我们将提交中的关键类作为修改类的等价类，利用关键类的修改模式，对影响分析结果进行优化。关键类识别功能作为我们系统的核心模块之一，其主要功能识别提交库每个提交中核心修改的类。该功能包含FeatureExtract与PredictModel两个类。关键类识别功能模块的类图如4-4所示。}
\par{由于关键类判别模型已离线训练，系统中不再加入关键类训练步骤。}