
\rhead{\xiaowuhao\sectionindex\quad总结与展望}
\section{总结与展望}
\par{代码修改作为软件维护工作的重要部分，是软件生命中期中关键的一环。如何辅助开发人员更高质量、更快速的完成代码修改成为软件维护过程中备受关注的问题。本文的研究目的是为了辅助开发人员在软件维护中能更高效率的完成代码修改工作。我们分别从修改影响分析及修改周期预测两个方面深入研究，提出了一些辅助开发人员完成代码修改工作的方法。本章将对前文工作进行总结，并对未来的研究工作进行展望。}
\subsection{工作总结}
\par{软件项目的发展周期中，需要不断应对新的问题及需求变化，使得代码修改工作成为软件维护中开发人员最频繁面对的工作。同时，软件项目的高速发展，互联网积累了更多数据资源，如软件维护过程中代码修改数据，代码审核数据等，为软件资源挖掘、影响分析等研究工作提供了更多的研究角度。如何高效的利用这些代码维护过程中数据辅助开发人员提高开发和维护的效率是非常有意义的工作。因此，本文立足于软件维护过程中数据，围绕如何提高开发人员的代码修改效率展开研究。首先，本文提出了一种基于历史修改模式的影响分析辅助方法，帮助开发人员在代码修改过程中，快速定位修改影响范围，保证修改的一致性。其次，本文还提出一种基于可判别特征的代码修改周期预测方法，辅助开发人员提前预估代码修改工作完成周期的长短，引导开发人员做出合适的调整。主要完成工作如下：}
\par{本文分析和总结了国内外关于修改影响分析、修改周期预测相关的研究，对两个研究点中具有代表性的方法进行了对比。文中还对比分析了现在方法和工具的不足，并针对修改影响分析、修改周期预测提出了新的研究方法。}
\par{软件实体的整体性导致软件中代码发生变动时，会影响其他部分的代码，这些问题增加了开发人员完成代码修改工作的难度。本文针对代码修改导致的软件实体不一致性，提出了一种基于历史修改模式的影响分析辅助方法。我们的方法在传统影响分析方法的基础上，借助历史修改信息对影响集进行调整，从而提高影响分析的效果。具体地，我们从版本控制系统中筛选了182个开源项目，并从中收集94778条历史修改提交数据，用于构建历史提交库。然后，通过修改代码及修改目标（注释文本）的相似度在提交库中检索最相似的提交，在相似度匹配中，我们对比的是当前修改类与提交中关键类的相似度。最后，我们基于结构耦合关系的相似性，将关键类与提交中其他类的修改传播模式，映射到当前修改类与初始影响集中的类上，从而调整初始影响集的排序，得到最终影响集。实验结果表明，我们的方法对传统影响分析结果具有很好的提升效果，在多个项目上影响集前5和前10的召回率、精确率平均提升超过15\%。}
\par{为了引导开发人员在代码修改工作中作出更准确的安排，本文提出一种基于可判别特征的修改周期预测方法。我们调研了开源项目的一些修改提交数据后，把修改周期按时间长短划分为三个层次，从而将修改周期预测定义为分类问题。该方法的关键是从提交数据中提取多维度可判别特征，包括：代码元特征、代码耦合特征及代码修改特征。从多维度衡量代码修改阶段及代码审核阶段的诸多影响因素。然后利用机器学习算法预测修改周期的长短。实验中，我们通过多种机器学习算法，验证了我们方法的可行性。}
\par{最后，我们围绕修改影响分析和修改周期预测两个方法，进行工具设计。工具的目标是在工作实践中有效地辅助软件开发和维护人员更加高效率的完成代码修改及代码维护工作。}
\subsection{研究展望}
\par{本文围绕修改影响分析和修改周期预测深入研究，提出了两种新的研究方法，经过实验验证，本文方法是实际有效的。然而，该方法仍然存在一些不足，包括：}
\par{1）在相似提交检索中关键的一步是识别提交中的关键类，而本文关键类识别方法仍存在一定的误差，从而不可避免地影响相似提交匹配。关键类判定模型的训练，需要提取更多有效特征，提高其识别准确率。}
\par{2）本文两个研究点都是基于软件修改和维护过程中数据，其中主要是修改提交数据。提交数据的数量和质量对实验结果会产生较大影响，在影响分析中，提交库覆盖了182个项目共94778条提交，而修改周期预测的数据集包括了2个项目共15861条数据。在后续工作中，我们需要增加更多数据。}
\par{3）在修改周期预测方面，目前从三个维度共提取了40维特征，在以后研究中，需要总结提取更多衡量代码修改的特征。其次，当前方法仅采用了常规的机器学习算法，在算法上存在改进空间。}
\par{4）在修改影响分析和修改周期预测的工具设计方面，为了更有方便开发人员使用，在后续工作中，可以将两方面工具集成到Eclipse插件中。在开发人员在实际开发工作中，能快速分析代码修改。}
