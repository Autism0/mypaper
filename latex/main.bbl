\begin{thebibliography}{10}

\bibitem{szabo2015novice}
Claudia Szabo.
\newblock Novice code understanding strategies during a software maintenance
  assignment.
\newblock In {\em Proceedings of the 37th International Conference on Software
  Engineering-Volume 2}, pages 276--284. IEEE Press, 2015.

\bibitem{rovegaard2008empirical}
Per Roveg{\aa}rd, Lefteris Angelis, and Claes Wohlin.
\newblock An empirical study on views of importance of change impact analysis
  issues.
\newblock {\em IEEE Transactions on Software Engineering}, (4):516--530, 2008.

\bibitem{kim2007prioritizing}
Sunghun Kim and Michael~D Ernst.
\newblock Prioritizing warning categories by analyzing software history.
\newblock In {\em Proceedings of the Fourth International Workshop on Mining
  Software Repositories}, page~27. IEEE Computer Society, 2007.

\bibitem{bradley2011supporting}
Alexander~WJ Bradley and Gail~C Murphy.
\newblock Supporting software history exploration.
\newblock In {\em Proceedings of the 8th working conference on mining software
  repositories}, pages 193--202. ACM, 2011.

\bibitem{wittenhagen2016chronicler}
Moritz Wittenhagen, Christian Cherek, and Jan Borchers.
\newblock Chronicler: Interactive exploration of source code history.
\newblock In {\em Proceedings of the 2016 CHI Conference on Human Factors in
  Computing Systems}, pages 3522--3532. ACM, 2016.

\bibitem{d2008analysing}
Marco D’Ambros, Harald Gall, Michele Lanza, and Martin Pinzger.
\newblock Analysing software repositories to understand software evolution.
\newblock In {\em Software evolution}, pages 37--67. Springer, 2008.

\bibitem{thomas2014studying}
Stephen~W Thomas, Bram Adams, Ahmed~E Hassan, and Dorothea Blostein.
\newblock Studying software evolution using topic models.
\newblock {\em Science of Computer Programming}, 80:457--479, 2014.

\bibitem{gousios2008measuring}
Georgios Gousios, Eirini Kalliamvakou, and Diomidis Spinellis.
\newblock Measuring developer contribution from software repository data.
\newblock In {\em Proceedings of the 2008 international working conference on
  Mining software repositories}, pages 129--132. ACM, 2008.

\bibitem{dabbish2012social}
Laura Dabbish, Colleen Stuart, Jason Tsay, and Jim Herbsleb.
\newblock Social coding in github: transparency and collaboration in an open
  software repository.
\newblock In {\em Proceedings of the ACM 2012 conference on computer supported
  cooperative work}, pages 1277--1286. ACM, 2012.

\bibitem{canfora2005impact}
Gerardo Canfora and Luigi Cerulo.
\newblock Impact analysis by mining software and change request repositories.
\newblock In {\em Software Metrics, 2005. 11th IEEE International Symposium},
  pages 9--pp. IEEE, 2005.

\bibitem{kagdi2010blending}
Huzefa Kagdi, Malcom Gethers, Denys Poshyvanyk, and Michael~L Collard.
\newblock Blending conceptual and evolutionary couplings to support change
  impact analysis in source code.
\newblock In {\em Reverse Engineering (WCRE), 2010 17th Working Conference on},
  pages 119--128. IEEE, 2010.

\bibitem{sun2015msr4sm}
Xiaobing Sun, Bixin Li, Hareton Leung, Bin Li, and Yun Li.
\newblock Msr4sm: Using topic models to effectively mining software
  repositories for software maintenance tasks.
\newblock {\em Information and Software Technology}, 66:1--12, 2015.

\bibitem{wong2015clocom}
Edmund Wong, Taiyue Liu, and Lin Tan.
\newblock Clocom: Mining existing source code for automatic comment generation.
\newblock In {\em Software Analysis, Evolution and Reengineering (SANER), 2015
  IEEE 22nd International Conference on}, pages 380--389. IEEE, 2015.

\bibitem{huang2017mining}
Yuan Huang, Qiaoyang Zheng, Xiangping Chen, Yingfei Xiong, Zhiyong Liu, and
  Xiaonan Luo.
\newblock Mining version control system for automatically generating commit
  comment.
\newblock In {\em Proceedings of the 11th ACM/IEEE International Symposium on
  Empirical Software Engineering and Measurement}, pages 414--423. IEEE Press,
  2017.

\bibitem{okutan2014software}
Ahmet Okutan and Olcay~Taner Y{\i}ld{\i}z.
\newblock Software defect prediction using bayesian networks.
\newblock {\em Empirical Software Engineering}, 19(1):154--181, 2014.

\bibitem{moeyersoms2015comprehensible}
Julie Moeyersoms, Enric~Junqu{\'e} de~Fortuny, Karel Dejaeger, Bart Baesens,
  and David Martens.
\newblock Comprehensible software fault and effort prediction: A data mining
  approach.
\newblock {\em Journal of Systems and Software}, 100:80--90, 2015.

\bibitem{nelson2004makes}
Stacy Nelson and Johann Schumann.
\newblock What makes a code review trustworthy?
\newblock In {\em System Sciences, 2004. Proceedings of the 37th Annual Hawaii
  International Conference on}, pages 10--pp. IEEE, 2004.

\bibitem{edmundson2013empirical}
Anne Edmundson, Brian Holtkamp, Emanuel Rivera, Matthew Finifter, Adrian
  Mettler, and David Wagner.
\newblock An empirical study on the effectiveness of security code review.
\newblock In {\em International Symposium on Engineering Secure Software and
  Systems}, pages 197--212. Springer, 2013.

\bibitem{mcintosh2016empirical}
Shane McIntosh, Yasutaka Kamei, Bram Adams, and Ahmed~E Hassan.
\newblock An empirical study of the impact of modern code review practices on
  software quality.
\newblock {\em Empirical Software Engineering}, 21(5):2146--2189, 2016.

\bibitem{sun14}
孙小兵, 李斌, 陈颖, 李必信, and 文万志.
\newblock 软件修改影响分析研究与进展.
\newblock {\em 电子学报}, 42(12):2467--2476, 2014.

\bibitem{bouktif2006extracting}
Salah Bouktif, Yann-Gael Gueheneuc, and Giuliano Antoniol.
\newblock Extracting change-patterns from cvs repositories.
\newblock In {\em Reverse Engineering, 2006. WCRE'06. 13th Working Conference
  on}, pages 221--230. IEEE, 2006.

\bibitem{bohner1991software}
Shawn~A Bohner and RS~Arnold.
\newblock Software change impact analysis for design evolution.
\newblock In {\em Proceedings of 8th International Conference on Maintenance
  and Re-engineering}, pages 292--301. IEEE CS Press Los Alamitos, CA, 1991.

\bibitem{park2011approach}
Seunghun Park and Doo-Hwan Bae.
\newblock An approach to analyzing the software process change impact using
  process slicing and simulation.
\newblock {\em Journal of Systems and Software}, 84(4):528--543, 2011.

\bibitem{kagdi2013integrating}
Huzefa Kagdi, Malcom Gethers, and Denys Poshyvanyk.
\newblock Integrating conceptual and logical couplings for change impact
  analysis in software.
\newblock {\em Empirical Software Engineering}, 18(5):933--969, 2013.

\bibitem{abdeen2015learning}
Hani Abdeen, Khaled Bali, Houari Sahraoui, and Bruno Dufour.
\newblock Learning dependency-based change impact predictors using independent
  change histories.
\newblock {\em Information and Software Technology}, 67:220--235, 2015.

\bibitem{apiwattanapong2005efficient}
Taweesup Apiwattanapong, Alessandro Orso, and Mary~Jean Harrold.
\newblock Efficient and precise dynamic impact analysis using execute-after
  sequences.
\newblock In {\em Proceedings of the 27th international conference on Software
  engineering}, pages 432--441. ACM, 2005.

\bibitem{huang2007precise}
Lulu Huang and Yeong-Tae Song.
\newblock Precise dynamic impact analysis with dependency analysis for
  object-oriented programs.
\newblock In {\em Software Engineering Research, Management \& Applications,
  2007. SERA 2007. 5th ACIS International Conference on}, pages 374--384. IEEE,
  2007.

\bibitem{lin2015nonlinear}
Chin-Yu Lin, Tung-Yueh Wu, and Chin-Cheng Huang.
\newblock Nonlinear dynamic impact analysis for installing a dry storage
  canister into a vertical concrete cask.
\newblock {\em International Journal of Pressure Vessels and Piping},
  131:22--35, 2015.

\bibitem{cai2016distia}
Haipeng Cai and Douglas Thain.
\newblock Distia: A cost-effective dynamic impact analysis for distributed
  programs.
\newblock In {\em Proceedings of the 31st IEEE/ACM International Conference on
  Automated Software Engineering}, pages 344--355. ACM, 2016.

\bibitem{breech2006integrating}
Ben Breech, Mike Tegtmeyer, and Lori Pollock.
\newblock Integrating influence mechanisms into impact analysis for increased
  precision.
\newblock In {\em Software Maintenance, 2006. ICSM'06. 22nd IEEE International
  Conference on}, pages 55--65. IEEE, 2006.

\bibitem{law2003whole}
James Law and Gregg Rothermel.
\newblock Whole program path-based dynamic impact analysis.
\newblock In {\em Proceedings of the 25th International Conference on Software
  Engineering}, pages 308--318. IEEE Computer Society, 2003.

\bibitem{cai2014diver}
Haipeng Cai and Raul Santelices.
\newblock Diver: Precise dynamic impact analysis using dependence-based trace
  pruning.
\newblock In {\em Proceedings of the 29th ACM/IEEE international conference on
  Automated software engineering}, pages 343--348. ACM, 2014.

\bibitem{briand2002automating}
Lionel Briand, Yvan Labiche, and George Soccar.
\newblock Automating impact analysis and regression test selection based on uml
  designs.
\newblock In {\em icsm}, page 0252. IEEE, 2002.

\bibitem{diaz2011change}
Jessica D{\'\i}az, Jennifer P{\'e}rez, Juan Garbajosa, and Alexander~L Wolf.
\newblock Change impact analysis in product-line architectures.
\newblock In {\em European Conference on Software Architecture}, pages
  114--129. Springer, 2011.

\bibitem{poshyvanyk2009using}
Denys Poshyvanyk, Andrian Marcus, Rudolf Ferenc, and Tibor Gyim{\'o}thy.
\newblock Using information retrieval based coupling measures for impact
  analysis.
\newblock {\em Empirical software engineering}, 14(1):5--32, 2009.

\bibitem{beszedes2007dynamic}
Arpad Beszedes, Tamas Gergely, Szabolcs Farago, Tibor Gyimothy, and Ferenc
  Fischer.
\newblock The dynamic function coupling metric and its use in software
  evolution.
\newblock In {\em Software Maintenance and Reengineering, 2007. CSMR'07. 11th
  European Conference on}, pages 103--112. IEEE, 2007.

\bibitem{rolfsnes2016generalizing}
Thomas Rolfsnes, Stefano Di~Alesio, Razieh Behjati, Leon Moonen, and Dave~W
  Binkley.
\newblock Generalizing the analysis of evolutionary coupling for software
  change impact analysis.
\newblock In {\em 2016 IEEE 23rd International Conference on Software Analysis,
  Evolution, and Reengineering (SANER)}, pages 201--212. IEEE, 2016.

\bibitem{hattori2008mining}
Lile Hattori, Gilson dos Santos~Jr, Fernando Cardoso, and Marcus Sampaio.
\newblock Mining software repositories for software change impact analysis: a
  case study.
\newblock In {\em Proceedings of the 23rd Brazilian symposium on Databases},
  pages 210--223. Sociedade Brasileira de Computa{\c{c}}{\~a}o, 2008.

\bibitem{li2013survey}
Bixin Li, Xiaobing Sun, Hareton Leung, and Sai Zhang.
\newblock A survey of code-based change impact analysis techniques.
\newblock {\em Software Testing, Verification and Reliability}, 23(8):613--646,
  2013.

\bibitem{thongtanunam2015should}
Patanamon Thongtanunam, Chakkrit Tantithamthavorn, Raula~Gaikovina Kula,
  Norihiro Yoshida, Hajimu Iida, and Ken-ichi Matsumoto.
\newblock Who should review my code? a file location-based code-reviewer
  recommendation approach for modern code review.
\newblock In {\em Software Analysis, Evolution and Reengineering (SANER), 2015
  IEEE 22nd International Conference on}, pages 141--150. IEEE, 2015.

\bibitem{kononenko2015investigating}
Oleksii Kononenko, Olga Baysal, Latifa Guerrouj, Yaxin Cao, and Michael~W
  Godfrey.
\newblock Investigating code review quality: Do people and participation
  matter?
\newblock In {\em Software Maintenance and Evolution (ICSME), 2015 IEEE
  International Conference on}, pages 111--120. IEEE, 2015.

\bibitem{baysal2016investigating}
Olga Baysal, Oleksii Kononenko, Reid Holmes, and Michael~W Godfrey.
\newblock Investigating technical and non-technical factors influencing modern
  code review.
\newblock {\em Empirical Software Engineering}, 21(3):932--959, 2016.

\bibitem{murali2017bayesian}
Vijayaraghavan Murali, Swarat Chaudhuri, and Chris Jermaine.
\newblock Bayesian specification learning for finding api usage errors.
\newblock In {\em Proceedings of the 2017 11th Joint Meeting on Foundations of
  Software Engineering}, pages 151--162. ACM, 2017.

\bibitem{mills2017automating}
Chris Mills.
\newblock Automating traceability link recovery through classification.
\newblock In {\em Proceedings of the 2017 11th Joint Meeting on Foundations of
  Software Engineering}, pages 1068--1070. ACM, 2017.

\bibitem{rath2018traceability}
Michael Rath, Jacob Rendall, Jin~LC Guo, Jane Cleland-Huang, and Patrick
  M{\"a}der.
\newblock Traceability in the wild: automatically augmenting incomplete trace
  links.
\newblock In {\em Proceedings of the 40th International Conference on Software
  Engineering}, pages 834--845. ACM, 2018.

\bibitem{karim2017software}
Syaeful Karim, Harco Leslie Hendric~Spits Warnars, Ford~Lumban Gaol, Edi
  Abdurachman, Benfano Soewito, et~al.
\newblock Software metrics for fault prediction using machine learning
  approaches: A literature review with promise repository dataset.
\newblock In {\em Cybernetics and Computational Intelligence (CyberneticsCom),
  2017 IEEE International Conference on}, pages 19--23. IEEE, 2017.

\bibitem{shimonaka2016identifying}
Kento Shimonaka, Soichi Sumi, Yoshiki Higo, and Shinji Kusumoto.
\newblock Identifying auto-generated code by using machine learning techniques.
\newblock In {\em Empirical Software Engineering in Practice (IWESEP), 2016 7th
  International Workshop on}, pages 18--23. IEEE, 2016.

\bibitem{nguyen2014statistical}
Anh~Tuan Nguyen, Hoan~Anh Nguyen, Tung~Thanh Nguyen, and Tien~N Nguyen.
\newblock Statistical learning approach for mining api usage mappings for code
  migration.
\newblock In {\em Proceedings of the 29th ACM/IEEE international conference on
  Automated software engineering}, pages 457--468. ACM, 2014.

\bibitem{linares2014using}
Mario Linares-V{\'a}squez, Collin McMillan, Denys Poshyvanyk, and Mark
  Grechanik.
\newblock On using machine learning to automatically classify software
  applications into domain categories.
\newblock {\em Empirical Software Engineering}, 19(3):582--618, 2014.

\bibitem{ying2004predicting}
Annie~TT Ying, Gail~C Murphy, Raymond Ng, and Mark~C Chu-Carroll.
\newblock Predicting source code changes by mining change history.
\newblock {\em IEEE transactions on Software Engineering}, 30(9):574--586,
  2004.

\bibitem{zimmermann2005mining}
Thomas Zimmermann, Andreas Zeller, Peter Weissgerber, and Stephan Diehl.
\newblock Mining version histories to guide software changes.
\newblock {\em IEEE Transactions on Software Engineering}, 31(6):429--445,
  2005.

\bibitem{ajienka2018empirical}
Nemitari Ajienka, Andrea Capiluppi, and Steve Counsell.
\newblock An empirical study on the interplay between semantic coupling and
  co-change of software classes.
\newblock {\em Empirical Software Engineering}, 23(3):1791--1825, 2018.

\bibitem{jaafar2014detecting}
Fehmi Jaafar, Yann-Ga{\"e}l Gu{\'e}h{\'e}neuc, Sylvie Hamel, and Giuliano
  Antoniol.
\newblock Detecting asynchrony and dephase change patterns by mining software
  repositories.
\newblock {\em Journal of Software: Evolution and Process}, 26(1):77--106,
  2014.

\bibitem{vaucher2008discovering}
St{\'e}phane Vaucher, Houari Sahraoui, and Jean Vaucher.
\newblock Discovering new change patterns in object-oriented systems.
\newblock In {\em Reverse Engineering, 2008. WCRE'08. 15th Working Conference
  on}, pages 37--41. IEEE, 2008.

\bibitem{fluri2008discovering}
Beat Fluri, Emanuel Giger, and Harald~C Gall.
\newblock Discovering patterns of change types.
\newblock In {\em Proceedings of the 2008 23rd IEEE/ACM International
  Conference on Automated Software Engineering}, pages 463--466. IEEE Computer
  Society, 2008.

\bibitem{michail1999data}
Amir Michail.
\newblock Data mining library reuse patterns in user-selected applications.
\newblock In {\em ase}, page~24. IEEE, 1999.

\bibitem{lin2013check}
Yu~Lin and Danny Dig.
\newblock Check-then-act misuse of java concurrent collections.
\newblock In {\em 2013 IEEE Sixth International Conference on Software Testing,
  Verification and Validation}, pages 164--173. IEEE, 2013.

\bibitem{holmes2006approximate}
Reid Holmes, Robert~J Walker, and Gail~C Murphy.
\newblock Approximate structural context matching: An approach to recommend
  relevant examples.
\newblock {\em IEEE Transactions on Software Engineering}, (12):952--970, 2006.

\bibitem{bruch2009learning}
Marcel Bruch, Martin Monperrus, and Mira Mezini.
\newblock Learning from examples to improve code completion systems.
\newblock In {\em Proceedings of the the 7th joint meeting of the European
  software engineering conference and the ACM SIGSOFT symposium on The
  foundations of software engineering}, pages 213--222. ACM, 2009.

\bibitem{zaidman2008mining}
Andy Zaidman, Bart Van~Rompaey, Serge Demeyer, and Arie Van~Deursen.
\newblock Mining software repositories to study co-evolution of production \&
  test code.
\newblock In {\em Software Testing, Verification, and Validation, 2008 1st
  International Conference on}, pages 220--229. IEEE, 2008.

\bibitem{fluri2007change}
Beat Fluri, Michael Wuersch, Martin PInzger, and Harald Gall.
\newblock Change distilling: Tree differencing for fine-grained source code
  change extraction.
\newblock {\em IEEE Transactions on software engineering}, 33(11), 2007.

\bibitem{goldberg2014word2vec}
Yoav Goldberg and Omer Levy.
\newblock word2vec explained: deriving mikolov et al.'s negative-sampling
  word-embedding method.
\newblock {\em arXiv preprint arXiv:1402.3722}, 2014.

\bibitem{mikolov2013distributed}
Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg~S Corrado, and Jeff Dean.
\newblock Distributed representations of words and phrases and their
  compositionality.
\newblock In {\em Advances in neural information processing systems}, pages
  3111--3119, 2013.

\bibitem{mikolov2013efficient}
Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey Dean.
\newblock Efficient estimation of word representations in vector space.
\newblock {\em arXiv preprint arXiv:1301.3781}, 2013.

\bibitem{eyolfson2011time}
Jon Eyolfson, Lin Tan, and Patrick Lam.
\newblock Do time of day and developer experience affect commit bugginess?
\newblock In {\em Proceedings of the 8th Working Conference on Mining Software
  Repositories}, pages 153--162. ACM, 2011.

\end{thebibliography}
