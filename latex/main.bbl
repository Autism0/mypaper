% Generated by IEEEtran.bst, version: 1.13 (2008/09/30)
\begin{thebibliography}{10}
\providecommand{\url}[1]{#1}
\csname url@samestyle\endcsname
\providecommand{\newblock}{\relax}
\providecommand{\bibinfo}[2]{#2}
\providecommand{\BIBentrySTDinterwordspacing}{\spaceskip=0pt\relax}
\providecommand{\BIBentryALTinterwordstretchfactor}{4}
\providecommand{\BIBentryALTinterwordspacing}{\spaceskip=\fontdimen2\font plus
\BIBentryALTinterwordstretchfactor\fontdimen3\font minus
  \fontdimen4\font\relax}
\providecommand{\BIBforeignlanguage}[2]{{%
\expandafter\ifx\csname l@#1\endcsname\relax
\typeout{** WARNING: IEEEtran.bst: No hyphenation pattern has been}%
\typeout{** loaded for the language `#1'. Using the pattern for}%
\typeout{** the default language instead.}%
\else
\language=\csname l@#1\endcsname
\fi
#2}}
\providecommand{\BIBdecl}{\relax}
\BIBdecl

\bibitem{szabo2015novice}
C.~Szabo, ``Novice code understanding strategies during a software maintenance
  assignment,'' in \emph{Proceedings of the 37th International Conference on
  Software Engineering-Volume 2}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE
  Press, 2015, pp. 276--284.

\bibitem{rovegaard2008empirical}
P.~Roveg{\aa}rd, L.~Angelis, and C.~Wohlin, ``An empirical study on views of
  importance of change impact analysis issues,'' \emph{IEEE Transactions on
  Software Engineering}, no.~4, pp. 516--530, 2008.

\bibitem{kim2007prioritizing}
S.~Kim and M.~D. Ernst, ``Prioritizing warning categories by analyzing software
  history,'' in \emph{Proceedings of the Fourth International Workshop on
  Mining Software Repositories}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE
  Computer Society, 2007, p.~27.

\bibitem{bradley2011supporting}
A.~W. Bradley and G.~C. Murphy, ``Supporting software history exploration,'' in
  \emph{Proceedings of the 8th working conference on mining software
  repositories}.\hskip 1em plus 0.5em minus 0.4em\relax ACM, 2011, pp.
  193--202.

\bibitem{wittenhagen2016chronicler}
M.~Wittenhagen, C.~Cherek, and J.~Borchers, ``Chronicler: Interactive
  exploration of source code history,'' in \emph{Proceedings of the 2016 CHI
  Conference on Human Factors in Computing Systems}.\hskip 1em plus 0.5em minus
  0.4em\relax ACM, 2016, pp. 3522--3532.

\bibitem{d2008analysing}
M.~D’Ambros, H.~Gall, M.~Lanza, and M.~Pinzger, ``Analysing software
  repositories to understand software evolution,'' in \emph{Software
  evolution}.\hskip 1em plus 0.5em minus 0.4em\relax Springer, 2008, pp.
  37--67.

\bibitem{thomas2014studying}
S.~W. Thomas, B.~Adams, A.~E. Hassan, and D.~Blostein, ``Studying software
  evolution using topic models,'' \emph{Science of Computer Programming},
  vol.~80, pp. 457--479, 2014.

\bibitem{gousios2008measuring}
G.~Gousios, E.~Kalliamvakou, and D.~Spinellis, ``Measuring developer
  contribution from software repository data,'' in \emph{Proceedings of the
  2008 international working conference on Mining software repositories}.\hskip
  1em plus 0.5em minus 0.4em\relax ACM, 2008, pp. 129--132.

\bibitem{dabbish2012social}
L.~Dabbish, C.~Stuart, J.~Tsay, and J.~Herbsleb, ``Social coding in github:
  transparency and collaboration in an open software repository,'' in
  \emph{Proceedings of the ACM 2012 conference on computer supported
  cooperative work}.\hskip 1em plus 0.5em minus 0.4em\relax ACM, 2012, pp.
  1277--1286.

\bibitem{canfora2005impact}
G.~Canfora and L.~Cerulo, ``Impact analysis by mining software and change
  request repositories,'' in \emph{Software Metrics, 2005. 11th IEEE
  International Symposium}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE, 2005,
  pp. 9--pp.

\bibitem{kagdi2010blending}
H.~Kagdi, M.~Gethers, D.~Poshyvanyk, and M.~L. Collard, ``Blending conceptual
  and evolutionary couplings to support change impact analysis in source
  code,'' in \emph{Reverse Engineering (WCRE), 2010 17th Working Conference
  on}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE, 2010, pp. 119--128.

\bibitem{sun2015msr4sm}
X.~Sun, B.~Li, H.~Leung, B.~Li, and Y.~Li, ``Msr4sm: Using topic models to
  effectively mining software repositories for software maintenance tasks,''
  \emph{Information and Software Technology}, vol.~66, pp. 1--12, 2015.

\bibitem{wong2015clocom}
E.~Wong, T.~Liu, and L.~Tan, ``Clocom: Mining existing source code for
  automatic comment generation,'' in \emph{Software Analysis, Evolution and
  Reengineering (SANER), 2015 IEEE 22nd International Conference on}.\hskip 1em
  plus 0.5em minus 0.4em\relax IEEE, 2015, pp. 380--389.

\bibitem{huang2017mining}
Y.~Huang, Q.~Zheng, X.~Chen, Y.~Xiong, Z.~Liu, and X.~Luo, ``Mining version
  control system for automatically generating commit comment,'' in
  \emph{Proceedings of the 11th ACM/IEEE International Symposium on Empirical
  Software Engineering and Measurement}.\hskip 1em plus 0.5em minus 0.4em\relax
  IEEE Press, 2017, pp. 414--423.

\bibitem{okutan2014software}
A.~Okutan and O.~T. Y{\i}ld{\i}z, ``Software defect prediction using bayesian
  networks,'' \emph{Empirical Software Engineering}, vol.~19, no.~1, pp.
  154--181, 2014.

\bibitem{moeyersoms2015comprehensible}
J.~Moeyersoms, E.~J. de~Fortuny, K.~Dejaeger, B.~Baesens, and D.~Martens,
  ``Comprehensible software fault and effort prediction: A data mining
  approach,'' \emph{Journal of Systems and Software}, vol. 100, pp. 80--90,
  2015.

\bibitem{nelson2004makes}
S.~Nelson and J.~Schumann, ``What makes a code review trustworthy?'' in
  \emph{System Sciences, 2004. Proceedings of the 37th Annual Hawaii
  International Conference on}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE,
  2004, pp. 10--pp.

\bibitem{edmundson2013empirical}
A.~Edmundson, B.~Holtkamp, E.~Rivera, M.~Finifter, A.~Mettler, and D.~Wagner,
  ``An empirical study on the effectiveness of security code review,'' in
  \emph{International Symposium on Engineering Secure Software and
  Systems}.\hskip 1em plus 0.5em minus 0.4em\relax Springer, 2013, pp.
  197--212.

\bibitem{mcintosh2016empirical}
S.~McIntosh, Y.~Kamei, B.~Adams, and A.~E. Hassan, ``An empirical study of the
  impact of modern code review practices on software quality,'' \emph{Empirical
  Software Engineering}, vol.~21, no.~5, pp. 2146--2189, 2016.

\bibitem{sun14}
孙小兵, 李斌, 陈颖, 李必信, and 文万志, ``软件修改影响分析研究与进展,''
  \emph{电子学报}, vol.~42, no.~12, pp. 2467--2476, 2014.

\bibitem{bouktif2006extracting}
S.~Bouktif, Y.-G. Gueheneuc, and G.~Antoniol, ``Extracting change-patterns from
  cvs repositories,'' in \emph{Reverse Engineering, 2006. WCRE'06. 13th Working
  Conference on}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE, 2006, pp.
  221--230.

\bibitem{bohner1991software}
S.~A. Bohner and R.~Arnold, ``Software change impact analysis for design
  evolution,'' in \emph{Proceedings of 8th International Conference on
  Maintenance and Re-engineering}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE
  CS Press Los Alamitos, CA, 1991, pp. 292--301.

\bibitem{park2011approach}
S.~Park and D.-H. Bae, ``An approach to analyzing the software process change
  impact using process slicing and simulation,'' \emph{Journal of Systems and
  Software}, vol.~84, no.~4, pp. 528--543, 2011.

\bibitem{kagdi2013integrating}
H.~Kagdi, M.~Gethers, and D.~Poshyvanyk, ``Integrating conceptual and logical
  couplings for change impact analysis in software,'' \emph{Empirical Software
  Engineering}, vol.~18, no.~5, pp. 933--969, 2013.

\bibitem{abdeen2015learning}
H.~Abdeen, K.~Bali, H.~Sahraoui, and B.~Dufour, ``Learning dependency-based
  change impact predictors using independent change histories,''
  \emph{Information and Software Technology}, vol.~67, pp. 220--235, 2015.

\bibitem{apiwattanapong2005efficient}
T.~Apiwattanapong, A.~Orso, and M.~J. Harrold, ``Efficient and precise dynamic
  impact analysis using execute-after sequences,'' in \emph{Proceedings of the
  27th international conference on Software engineering}.\hskip 1em plus 0.5em
  minus 0.4em\relax ACM, 2005, pp. 432--441.

\bibitem{huang2007precise}
L.~Huang and Y.-T. Song, ``Precise dynamic impact analysis with dependency
  analysis for object-oriented programs,'' in \emph{Software Engineering
  Research, Management \& Applications, 2007. SERA 2007. 5th ACIS International
  Conference on}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE, 2007, pp.
  374--384.

\bibitem{lin2015nonlinear}
C.-Y. Lin, T.-Y. Wu, and C.-C. Huang, ``Nonlinear dynamic impact analysis for
  installing a dry storage canister into a vertical concrete cask,''
  \emph{International Journal of Pressure Vessels and Piping}, vol. 131, pp.
  22--35, 2015.

\bibitem{cai2016distia}
H.~Cai and D.~Thain, ``Distia: A cost-effective dynamic impact analysis for
  distributed programs,'' in \emph{Proceedings of the 31st IEEE/ACM
  International Conference on Automated Software Engineering}.\hskip 1em plus
  0.5em minus 0.4em\relax ACM, 2016, pp. 344--355.

\bibitem{breech2006integrating}
B.~Breech, M.~Tegtmeyer, and L.~Pollock, ``Integrating influence mechanisms
  into impact analysis for increased precision,'' in \emph{Software
  Maintenance, 2006. ICSM'06. 22nd IEEE International Conference on}.\hskip 1em
  plus 0.5em minus 0.4em\relax IEEE, 2006, pp. 55--65.

\bibitem{law2003whole}
J.~Law and G.~Rothermel, ``Whole program path-based dynamic impact analysis,''
  in \emph{Proceedings of the 25th International Conference on Software
  Engineering}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE Computer Society,
  2003, pp. 308--318.

\bibitem{cai2014diver}
H.~Cai and R.~Santelices, ``Diver: Precise dynamic impact analysis using
  dependence-based trace pruning,'' in \emph{Proceedings of the 29th ACM/IEEE
  international conference on Automated software engineering}.\hskip 1em plus
  0.5em minus 0.4em\relax ACM, 2014, pp. 343--348.

\bibitem{briand2002automating}
L.~Briand, Y.~Labiche, and G.~Soccar, ``Automating impact analysis and
  regression test selection based on uml designs,'' in \emph{icsm}.\hskip 1em
  plus 0.5em minus 0.4em\relax IEEE, 2002, p. 0252.

\bibitem{diaz2011change}
J.~D{\'\i}az, J.~P{\'e}rez, J.~Garbajosa, and A.~L. Wolf, ``Change impact
  analysis in product-line architectures,'' in \emph{European Conference on
  Software Architecture}.\hskip 1em plus 0.5em minus 0.4em\relax Springer,
  2011, pp. 114--129.

\bibitem{poshyvanyk2009using}
D.~Poshyvanyk, A.~Marcus, R.~Ferenc, and T.~Gyim{\'o}thy, ``Using information
  retrieval based coupling measures for impact analysis,'' \emph{Empirical
  software engineering}, vol.~14, no.~1, pp. 5--32, 2009.

\bibitem{beszedes2007dynamic}
A.~Beszedes, T.~Gergely, S.~Farago, T.~Gyimothy, and F.~Fischer, ``The dynamic
  function coupling metric and its use in software evolution,'' in
  \emph{Software Maintenance and Reengineering, 2007. CSMR'07. 11th European
  Conference on}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE, 2007, pp.
  103--112.

\bibitem{rolfsnes2016generalizing}
T.~Rolfsnes, S.~Di~Alesio, R.~Behjati, L.~Moonen, and D.~W. Binkley,
  ``Generalizing the analysis of evolutionary coupling for software change
  impact analysis,'' in \emph{2016 IEEE 23rd International Conference on
  Software Analysis, Evolution, and Reengineering (SANER)}.\hskip 1em plus
  0.5em minus 0.4em\relax IEEE, 2016, pp. 201--212.

\bibitem{hattori2008mining}
L.~Hattori, G.~dos Santos~Jr, F.~Cardoso, and M.~Sampaio, ``Mining software
  repositories for software change impact analysis: a case study,'' in
  \emph{Proceedings of the 23rd Brazilian symposium on Databases}.\hskip 1em
  plus 0.5em minus 0.4em\relax Sociedade Brasileira de Computa{\c{c}}{\~a}o,
  2008, pp. 210--223.

\bibitem{li2013survey}
B.~Li, X.~Sun, H.~Leung, and S.~Zhang, ``A survey of code-based change impact
  analysis techniques,'' \emph{Software Testing, Verification and Reliability},
  vol.~23, no.~8, pp. 613--646, 2013.

\bibitem{thongtanunam2015should}
P.~Thongtanunam, C.~Tantithamthavorn, R.~G. Kula, N.~Yoshida, H.~Iida, and
  K.-i. Matsumoto, ``Who should review my code? a file location-based
  code-reviewer recommendation approach for modern code review,'' in
  \emph{Software Analysis, Evolution and Reengineering (SANER), 2015 IEEE 22nd
  International Conference on}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE,
  2015, pp. 141--150.

\bibitem{kononenko2015investigating}
O.~Kononenko, O.~Baysal, L.~Guerrouj, Y.~Cao, and M.~W. Godfrey,
  ``Investigating code review quality: Do people and participation matter?'' in
  \emph{Software Maintenance and Evolution (ICSME), 2015 IEEE International
  Conference on}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE, 2015, pp.
  111--120.

\bibitem{baysal2016investigating}
O.~Baysal, O.~Kononenko, R.~Holmes, and M.~W. Godfrey, ``Investigating
  technical and non-technical factors influencing modern code review,''
  \emph{Empirical Software Engineering}, vol.~21, no.~3, pp. 932--959, 2016.

\bibitem{murali2017bayesian}
V.~Murali, S.~Chaudhuri, and C.~Jermaine, ``Bayesian specification learning for
  finding api usage errors,'' in \emph{Proceedings of the 2017 11th Joint
  Meeting on Foundations of Software Engineering}.\hskip 1em plus 0.5em minus
  0.4em\relax ACM, 2017, pp. 151--162.

\bibitem{mills2017automating}
C.~Mills, ``Automating traceability link recovery through classification,'' in
  \emph{Proceedings of the 2017 11th Joint Meeting on Foundations of Software
  Engineering}.\hskip 1em plus 0.5em minus 0.4em\relax ACM, 2017, pp.
  1068--1070.

\bibitem{rath2018traceability}
M.~Rath, J.~Rendall, J.~L. Guo, J.~Cleland-Huang, and P.~M{\"a}der,
  ``Traceability in the wild: automatically augmenting incomplete trace
  links,'' in \emph{Proceedings of the 40th International Conference on
  Software Engineering}.\hskip 1em plus 0.5em minus 0.4em\relax ACM, 2018, pp.
  834--845.

\bibitem{karim2017software}
S.~Karim, H.~L. H.~S. Warnars, F.~L. Gaol, E.~Abdurachman, B.~Soewito
  \emph{et~al.}, ``Software metrics for fault prediction using machine learning
  approaches: A literature review with promise repository dataset,'' in
  \emph{Cybernetics and Computational Intelligence (CyberneticsCom), 2017 IEEE
  International Conference on}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE,
  2017, pp. 19--23.

\bibitem{shimonaka2016identifying}
K.~Shimonaka, S.~Sumi, Y.~Higo, and S.~Kusumoto, ``Identifying auto-generated
  code by using machine learning techniques,'' in \emph{Empirical Software
  Engineering in Practice (IWESEP), 2016 7th International Workshop on}.\hskip
  1em plus 0.5em minus 0.4em\relax IEEE, 2016, pp. 18--23.

\bibitem{nguyen2014statistical}
A.~T. Nguyen, H.~A. Nguyen, T.~T. Nguyen, and T.~N. Nguyen, ``Statistical
  learning approach for mining api usage mappings for code migration,'' in
  \emph{Proceedings of the 29th ACM/IEEE international conference on Automated
  software engineering}.\hskip 1em plus 0.5em minus 0.4em\relax ACM, 2014, pp.
  457--468.

\bibitem{linares2014using}
M.~Linares-V{\'a}squez, C.~McMillan, D.~Poshyvanyk, and M.~Grechanik, ``On
  using machine learning to automatically classify software applications into
  domain categories,'' \emph{Empirical Software Engineering}, vol.~19, no.~3,
  pp. 582--618, 2014.

\bibitem{ying2004predicting}
A.~T. Ying, G.~C. Murphy, R.~Ng, and M.~C. Chu-Carroll, ``Predicting source
  code changes by mining change history,'' \emph{IEEE transactions on Software
  Engineering}, vol.~30, no.~9, pp. 574--586, 2004.

\bibitem{zimmermann2005mining}
T.~Zimmermann, A.~Zeller, P.~Weissgerber, and S.~Diehl, ``Mining version
  histories to guide software changes,'' \emph{IEEE Transactions on Software
  Engineering}, vol.~31, no.~6, pp. 429--445, 2005.

\bibitem{ajienka2018empirical}
N.~Ajienka, A.~Capiluppi, and S.~Counsell, ``An empirical study on the
  interplay between semantic coupling and co-change of software classes,''
  \emph{Empirical Software Engineering}, vol.~23, no.~3, pp. 1791--1825, 2018.

\bibitem{jaafar2014detecting}
F.~Jaafar, Y.-G. Gu{\'e}h{\'e}neuc, S.~Hamel, and G.~Antoniol, ``Detecting
  asynchrony and dephase change patterns by mining software repositories,''
  \emph{Journal of Software: Evolution and Process}, vol.~26, no.~1, pp.
  77--106, 2014.

\bibitem{vaucher2008discovering}
S.~Vaucher, H.~Sahraoui, and J.~Vaucher, ``Discovering new change patterns in
  object-oriented systems,'' in \emph{Reverse Engineering, 2008. WCRE'08. 15th
  Working Conference on}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE, 2008,
  pp. 37--41.

\bibitem{fluri2008discovering}
B.~Fluri, E.~Giger, and H.~C. Gall, ``Discovering patterns of change types,''
  in \emph{Proceedings of the 2008 23rd IEEE/ACM International Conference on
  Automated Software Engineering}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE
  Computer Society, 2008, pp. 463--466.

\bibitem{michail1999data}
A.~Michail, ``Data mining library reuse patterns in user-selected
  applications,'' in \emph{ase}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE,
  1999, p.~24.

\bibitem{lin2013check}
Y.~Lin and D.~Dig, ``Check-then-act misuse of java concurrent collections,'' in
  \emph{2013 IEEE Sixth International Conference on Software Testing,
  Verification and Validation}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE,
  2013, pp. 164--173.

\bibitem{holmes2006approximate}
R.~Holmes, R.~J. Walker, and G.~C. Murphy, ``Approximate structural context
  matching: An approach to recommend relevant examples,'' \emph{IEEE
  Transactions on Software Engineering}, no.~12, pp. 952--970, 2006.

\bibitem{bruch2009learning}
M.~Bruch, M.~Monperrus, and M.~Mezini, ``Learning from examples to improve code
  completion systems,'' in \emph{Proceedings of the the 7th joint meeting of
  the European software engineering conference and the ACM SIGSOFT symposium on
  The foundations of software engineering}.\hskip 1em plus 0.5em minus
  0.4em\relax ACM, 2009, pp. 213--222.

\bibitem{zaidman2008mining}
A.~Zaidman, B.~Van~Rompaey, S.~Demeyer, and A.~Van~Deursen, ``Mining software
  repositories to study co-evolution of production \& test code,'' in
  \emph{Software Testing, Verification, and Validation, 2008 1st International
  Conference on}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE, 2008, pp.
  220--229.

\bibitem{fluri2007change}
B.~Fluri, M.~Wuersch, M.~PInzger, and H.~Gall, ``Change distilling: Tree
  differencing for fine-grained source code change extraction,'' \emph{IEEE
  Transactions on software engineering}, vol.~33, no.~11, 2007.

\bibitem{goldberg2014word2vec}
Y.~Goldberg and O.~Levy, ``word2vec explained: deriving mikolov et al.'s
  negative-sampling word-embedding method,'' \emph{arXiv preprint
  arXiv:1402.3722}, 2014.

\bibitem{mikolov2013distributed}
T.~Mikolov, I.~Sutskever, K.~Chen, G.~S. Corrado, and J.~Dean, ``Distributed
  representations of words and phrases and their compositionality,'' in
  \emph{Advances in neural information processing systems}, 2013, pp.
  3111--3119.

\bibitem{mikolov2013efficient}
T.~Mikolov, K.~Chen, G.~Corrado, and J.~Dean, ``Efficient estimation of word
  representations in vector space,'' \emph{arXiv preprint arXiv:1301.3781},
  2013.

\end{thebibliography}
